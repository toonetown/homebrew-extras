# Sets some helper functions for docker instances
which docker >/dev/null && which docker-machine >/dev/null && {
	DEFAULT_DOCKER_NAME="default"
	function docker-isrunning { 
		[ -n "$(docker-machine ls -q --filter state=Running --filter name="^${1:-${DEFAULT_DOCKER_NAME}}$")" ]
		return $?
	}
	function docker-start { 
		docker-isrunning "${1:-${DEFAULT_DOCKER_NAME}}" || docker-machine start "${1:-${DEFAULT_DOCKER_NAME}}"
		return $?
	}
	function docker-stop { 
		docker-isrunning "${1:-${DEFAULT_DOCKER_NAME}}" && docker-machine stop "${1:-${DEFAULT_DOCKER_NAME}}"
		return $?
	}
	function docker-connect { 
		docker-start "${1:-${DEFAULT_DOCKER_NAME}}" && eval "$(docker-machine env ${1:-${DEFAULT_DOCKER_NAME}})"
		return $?
	}
	function docker-disconnect { 
		eval "$(docker-machine env -u)"
	}
	function docker-port {
		docker port $@ | sed -e "s/0.0.0.0:/$(docker-machine ip "${DOCKER_MACHINE_NAME}"):/g"
		return $?
	}
    function docker-clear-log {
        [ -n "${1}" ] || { echo "Container is required" >&2; return 1; }
        CNT="$(docker inspect --format="{{ .Id }}" "${1}")"
        [ -n "${CNT}" ] || { return 1; }
        docker-machine ssh "${DOCKER_MACHINE_NAME}" \
            sudo find /var/lib/docker/containers/${CNT} -type f -name '*-json.log' -delete || return $?
        echo "${1}"
    }
    function docker-tail {
        [ -n "${1}" ] || { echo "Container is required" >&2; return 1; }
        while true; do
            docker logs -f "${1}" || return $?
            [ "$(docker inspect --format="{{ .State.Running }}" "${1}" 2>/dev/null)" == "true" ] || break
        done
    }
}
