# Sets some helper functions for docker instances
which docker >/dev/null && which docker-machine >/dev/null && {

    # Extensions to docker-machine
    function __docker_machine_env_wrapper {
        case "${1}" in
            "isrunning")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine isrunning [arg...]"
                    echo ""
                    echo "Checks if a machine is running"
                    echo ""
                    echo "Description:"
                    echo "   Argument(s) are one or more machine names."
                    return 0
                else
                    if [ $# -eq 0 ]; then _MACHINES=("default"); else _MACHINES=("$@"); fi
                    for m in ${_MACHINES[@]}; do
                        [ -n "$(command docker-machine ls -q --filter state=Running --filter name="^${m}$")" ] || {
                            return $?
                        }
                    done
                    return 0
                fi
                ;;
            "start")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    command docker-machine start -h \
                     | sed -e 's/^Start a machine$/Start a machine if it is not already running/g'
                else
                    __docker_machine_env_wrapper isrunning "$@" || command docker-machine start "$@"
                fi
                ;;
            "stop")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    command docker-machine stop -h \
                     | sed -e 's/^Stop a machine$/Stop a machine if it is running/g'
                else
                    __docker_machine_env_wrapper isrunning "$@" && command docker-machine stop "$@"
                fi
                ;;
            "connect")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    command docker-machine env -h \
                     | sed -e 's/ docker-machine env / docker-machine connect /g' \
                     | sed -e 's/^Display \(.*\) client$/Evaluate \1 client, starting machine if needed/g'
                else
                    _ENV_ARGS=()
                    while [ $# -gt 0 ]; do
                        if [ ${1:0:1} == "-" ]; then _ENV_ARGS+=("${1}"); shift; else break; fi
                    done
                    __docker_machine_env_wrapper start "$@" \
                    && eval "$(command docker-machine env "${_ENV_ARGS[@]}" "$@")"
                fi
                ;;
            "disconnect")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine disconnect [arg...]"
                    echo ""
                    echo "Unset all docker-machine environment variables"
                    echo ""
                    echo "Description:"
                    echo "   Argument is a machine name."
                else
                    eval "$(command docker-machine env -u "$@")"
                fi
                ;;
            "route")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine route [arg...]"
                    echo ""
                    echo "Routes traffic for docker containers through the machine"
                    echo ""
                    echo "Description:"
                    echo "   Argument is a machine name."
                else
                    if [ $# -eq 0 ]; then _MACHINES=("default"); else _MACHINES=("$@"); fi
                    for m in ${_MACHINES[@]}; do
                        _DM_IP="$(command docker-machine ip ${m})" || return 1
                        _CNT_ROUTE="$(command docker-machine ssh ${m} ip route show | awk '/docker0/{print $1}')"
                        [ -n "${_CNT_ROUTE}" ] || return 1
                        if netstat -rn | awk "\$2 == \"${_DM_IP}\" { exit(1); }"; then
                            sudo route -n add "${_CNT_ROUTE}" "${_DM_IP}"
                        else
                            echo "Already routing to the docker VM ${m}:"
                            netstat -rn | awk "\$2 == \"${_DM_IP}\"||/Destination.*Refs/ { print; }"
                        fi
                    done
                fi
                ;;
            "unroute")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine unroute [arg...]"
                    echo ""
                    echo "Un-routes traffic for docker containers through the machine"
                    echo ""
                    echo "Description:"
                    echo "   Argument is a machine name."
                else
                    if [ $# -eq 0 ]; then _MACHINES=("default"); else _MACHINES=("$@"); fi
                    for m in ${_MACHINES[@]}; do
                        _DM_IP="$(command docker-machine ip ${m})" || return 1
                        _CNT_ROUTE="$(command docker-machine ssh ${m} ip route show | awk '/docker0/{print $1}')"
                        [ -n "${_CNT_ROUTE}" ] || return 1
                        if netstat -rn | awk "\$2 == \"${_DM_IP}\" { exit(1); }"; then
                            echo "Not routing to the docker VM ${m}"
                        else
                            sudo route -n delete "${_CNT_ROUTE}"
                        fi
                    done
                fi
                ;;
            *)
                command docker-machine "$@"
                ;;
        esac
        return $?
    }

    # Extensions to docker
    function __docker_env_wrapper {
        case "${1}" in
            "rmlogs")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" -o -z "${1}" ]; then
                    if [ -z "${1}" ]; then
                        _O=/dev/stderr; _R=1
                        echo "docker: \"rmlogs\" requires a minimum of 1 argument." >${_O}
                    else
                        _O=/dev/stdout; _R=0
                        echo "" >${_O}
                    fi
                    echo "Usage:	docker rmlogs CONTAINER [CONTAINER...]" >${_O}
                    echo ""                                                 >${_O}
                    echo "Remove logs for one or more containers"           >${_O}
                    return ${_R}
                else
                    for c in $@; do
                        _CNT="$(command docker inspect --format="{{ .Id }}" "${c}")"
                        [ -n "${_CNT}" ] || return 1
                        echo "Removing logs for $_CNT..."
                        command docker-machine ssh "${DOCKER_MACHINE_NAME}" \
                                    sudo find /var/lib/docker/containers/${_CNT} \
                                        -type f -name '*-json.log' \
                                        -exec tee {} + </dev/null || return $?
                    done
                    return 0
                fi
                ;;
            "port")
                shift
                command docker port "$@" \
                 | sed -e "s/0.0.0.0:/$(command docker-machine ip "${DOCKER_MACHINE_NAME}"):/g"
                ;;
            *)
                command docker "$@"
                ;;
        esac
        return $?
    }

    # Set up the aliases - but flag the docker system not to wrap it
    DOCKER_MACHINE_WRAPPED=false
    alias docker-machine=__docker_machine_env_wrapper
    alias docker=__docker_env_wrapper
}
