# Check for interactive bash.
[ -z "$BASH_VERSION" -o -z "$PS1" -o "${BASH-no}" != "/bin/bash" ] && return

# Sets some helper functions for docker instances
which docker >/dev/null && which docker-machine >/dev/null && {

    # Flag the docker system not to wrap it
    DOCKER_MACHINE_WRAPPED=false

    # Extensions to docker-machine
    __docker_machine_env_wrapper() {
        case "${1}" in
            "isrunning")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine isrunning [arg...]"
                    echo ""
                    echo "Checks if a machine is running"
                    echo ""
                    echo "Description:"
                    echo "   Argument(s) are one or more machine names."
                    return 0
                else
                    if [ $# -eq 0 ]; then _MACHINES=("default"); else _MACHINES=("$@"); fi
                    for m in ${_MACHINES[@]}; do
                        [ -n "$(command docker-machine ls -q --filter state=Running --filter name="^${m}$")" ] || {
                            return $?
                        }
                    done
                    return 0
                fi
                ;;
            "start")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    command docker-machine start -h \
                     | sed -e 's/^Start a machine$/Start a machine if it is not already running/g'
                else
                    __docker_machine_env_wrapper isrunning "$@" || command docker-machine start "$@"
                fi
                ;;
            "stop")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    command docker-machine stop -h \
                     | sed -e 's/^Stop a machine$/Stop a machine if it is running/g'
                else
                    __docker_machine_env_wrapper isrunning "$@" && command docker-machine stop "$@"
                fi
                ;;
            "connect")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    command docker-machine env -h \
                     | sed -e 's/ docker-machine env / docker-machine connect /g' \
                     | sed -e 's/^Display \(.*\) client$/Evaluate \1 client, starting machine if needed/g' \
                     | grep -v -- '--shell'
                else
                    _ENV_ARGS=()
                    while [ $# -gt 0 ]; do
                        if [ ${1:0:1} == "-" ]; then 
                            [ "${1}" != "--shell" ] && _ENV_ARGS+=("${1}"); shift
                        else 
                            break
                        fi
                    done
                    __docker_machine_env_wrapper start "$@" \
                    && eval "$(command docker-machine env "${_ENV_ARGS[@]}" "$@")"
                fi
                ;;
            "disconnect")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine disconnect"
                    echo ""
                    echo "Unset all docker-machine environment variables"
                else
                    eval "$(command docker-machine env -u "$@")"
                fi
                ;;
            "route")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine route [arg...]"
                    echo ""
                    echo "Routes traffic for docker containers through the machine"
                    echo ""
                    echo "Description:"
                    echo "   Argument is a machine name."
                else
                    if [ $# -eq 0 ]; then _MACHINES=("default"); else _MACHINES=("$@"); fi
                    for m in ${_MACHINES[@]}; do
                        _DM_IP="$(command docker-machine ip ${m})" || return 1
                        _CNT_ROUTE="$(command docker-machine ssh ${m} ip route show | awk '/docker0/{print $1}')"
                        [ -n "${_CNT_ROUTE}" ] || return 1
                        if netstat -rn | awk "\$2 == \"${_DM_IP}\" { exit(1); }"; then
                            sudo -n true &>/dev/null || echo "Using sudo to set up route"
                            sudo route -n add "${_CNT_ROUTE}" "${_DM_IP}"
                        else
                            echo "Already routing to the docker VM ${m}:"
                            netstat -rn | awk "\$2 == \"${_DM_IP}\"||/Destination.*Refs/ { print; }"
                        fi
                    done
                fi
                ;;
            "unroute")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                    echo "Usage: docker-machine unroute [arg...]"
                    echo ""
                    echo "Un-routes traffic for docker containers through the machine"
                    echo ""
                    echo "Description:"
                    echo "   Argument is a machine name."
                else
                    if [ $# -eq 0 ]; then _MACHINES=("default"); else _MACHINES=("$@"); fi
                    for m in ${_MACHINES[@]}; do
                        _DM_IP="$(command docker-machine ip ${m})" || return 1
                        _CNT_ROUTE="$(command docker-machine ssh ${m} ip route show | awk '/docker0/{print $1}')"
                        [ -n "${_CNT_ROUTE}" ] || return 1
                        if netstat -rn | awk "\$2 == \"${_DM_IP}\" { exit(1); }"; then
                            echo "Not routing to the docker VM ${m}"
                        else
                            sudo -n true &>/dev/null || echo "Using sudo to tear down route"
                            sudo route -n delete "${_CNT_ROUTE}"
                        fi
                    done
                fi
                ;;
            "help" | "-h" | "--help" | "")
                [ -n "${1}" ] && shift
                case "${1}" in
                    "")
                        command docker-machine help \
                        | awk '/^Run / {
                            print "Extended Commands:";
                            print "  connect"    "\t\t" \
                                            "Evaluate the commands to set up the environment for the Docker client";
                            print "  disconnect" "\t\t" \
                                            "Unset all docker-machine environment variables";
                            print "  isrunning"  "\t\t" \
                                            "Checks if a machine is running";
                            print "  route"    "\t\t\t" \
                                            "Routes traffic for docker containers through the machine";
                            print "  unroute"    "\t\t" \
                                            "Un-routes traffic for docker containers through the machine";
                            print "";
                        }1'
                        ;;
                    "isrunning" | "connect" | "disconnect" | "route" | "unroute")
                        __docker_machine_env_wrapper ${1} --help
                        ;;
                    *)
                        command docker-machine help "$@"
                        ;;
                esac
                ;;
            *)
                command docker-machine "$@"
                ;;
        esac
        return $?
    }
    alias docker-machine=__docker_machine_env_wrapper
    
    # Set up docker-machine auto-complete (as needed)
    if declare -f _docker_machine >/dev/null; then
        _docker_machine_env_commands=()

        _docker_machine_isrunning() {
            if [[ "${cur}" == -* ]]; then
                COMPREPLY=($(compgen -W "--help" -- "${cur}"))
            else
                COMPREPLY=($(compgen -W "$(docker-machine ls -q)" -- "${cur}"))
            fi
        }
        _docker_machine_env_commands+=(isrunning)
        
        _docker_machine_connect() {
            if [[ "${cur}" == -* ]]; then
                COMPREPLY=($(compgen -W "--swarm --unset --no-proxy --help" -- "${cur}"))
            else
                COMPREPLY=($(compgen -W "$(docker-machine ls -q)" -- "${cur}"))
            fi
        }
        _docker_machine_env_commands+=(connect)

        _docker_machine_disconnect() {
            if [[ "${cur}" == -* ]]; then
                COMPREPLY=($(compgen -W "--help" -- "${cur}"))
            fi
        }
        _docker_machine_env_commands+=(disconnect)
        
        _docker_machine_route() {
            if [[ "${cur}" == -* ]]; then
                COMPREPLY=($(compgen -W "--help" -- "${cur}"))
            else
                COMPREPLY=($(compgen -W "$(docker-machine ls -q)" -- "${cur}"))
            fi
        }
        _docker_machine_env_commands+=(route)

        _docker_machine_unroute() {
            if [[ "${cur}" == -* ]]; then
                COMPREPLY=($(compgen -W "--help" -- "${cur}"))
            else
                COMPREPLY=($(compgen -W "$(docker-machine ls -q)" -- "${cur}"))
            fi
        }
        _docker_machine_env_commands+=(unroute)
        
        eval "$(declare -f _docker_machine | sed -E "s/(local commands=\()/\1${_docker_machine_env_commands[*]} /g")"
    fi
    

    # Extensions to docker
    __docker_env_wrapper() {
        case "${1}" in
            "rmlogs")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" -o -z "${1}" ]; then
                    if [ -z "${1}" ]; then
                        _O=/dev/stderr; _R=1
                        echo "docker: \"rmlogs\" requires a minimum of 1 argument." >${_O}
                    else
                        _O=/dev/stdout; _R=0
                        echo "" >${_O}
                    fi
                    echo "Usage:	docker rmlogs CONTAINER [CONTAINER...]" >${_O}
                    echo ""                                                 >${_O}
                    echo "Remove logs for one or more containers"           >${_O}
                    return ${_R}
                else
                    if [ -z "${DOCKER_MACHINE_NAME}" ]; then
                        echo "Cannot currently remove logs from Docker for Mac" >${_O}
                        return 1
                    else                        
                        for c in $@; do
                            _CNT="$(command docker inspect --format="{{ .Id }}" "${c}")"
                            [ -n "${_CNT}" ] || return 1
                            echo "Removing logs for $_CNT..."
                            command docker-machine ssh "${DOCKER_MACHINE_NAME}" \
                                        sudo find /var/lib/docker/containers/${_CNT} \
                                            -type f -name '*-json.log' \
                                            -exec tee {} + </dev/null || return $?
                        done
                    fi
                    return 0
                fi
                ;;
            "ip")
                shift
                if [ "${1}" == "-h" -o "${1}" == "--help" -o -z "${1}" ]; then
                    if [ -z "${1}" ]; then
                        _O=/dev/stderr; _R=1
                        echo "docker: \"ip\" requires a minimum of 1 argument." >${_O}
                    else
                        _O=/dev/stdout; _R=0
                        echo "" >${_O}
                    fi
                    echo "Usage:	docker ip CONTAINER [CONTAINER...]"             >${_O}
                    echo ""                                                         >${_O}
                    echo "Returns the IP address for one or more containers"        >${_O}
                    return ${_R}
                else
                    for c in $@; do
                        command docker inspect \
                                    --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" \
                                    "${c}" || return $?
                    done
                    return 0
                fi
                ;;
            "port")
                shift
                if [ -z "${DOCKER_MACHINE_NAME}" ]; then
                    command docker port "$@"
                else
                    command docker port "$@" \
                     | sed -e "s/0.0.0.0:/$(command docker-machine ip "${DOCKER_MACHINE_NAME}"):/g"
                fi
                ;;
            "help" | "-h" | "--help" | "")
                [ -n "${1}" ] && shift
                case "${1}" in
                    "")
                        command docker help \
                        | awk '/^Run / {
                            print "Extended Commands:";
                            print "    ip        Returns the IP address for one or more containers";
                            print "    rmlogs    Remove logs for one or more containers";
                            print "";
                        }1'
                        ;;
                    "ip" | "rmlogs")
                        __docker_env_wrapper ${1} --help
                        ;;
                    *)
                        command docker help "$@"
                        ;;
                esac
                ;;
            *)
                command docker "$@"
                ;;
        esac
        return $?
    }
    alias docker=__docker_env_wrapper

    # Set up docker auto-complete (as needed)
    if declare -f _docker >/dev/null; then
        _docker_env_commands=()

        _docker_rmlogs() {
            if [[ "${cur}" == -* ]]; then
                COMPREPLY=($(compgen -W "--help" -- "${cur}"))
            else
                __docker_complete_containers_all
            fi
        }
        _docker_env_commands+=(rmlogs)
        
        _docker_ip() {
            if [[ "${cur}" == -* ]]; then
                COMPREPLY=($(compgen -W "--help" -- "${cur}"))
            else
                __docker_complete_containers_running
            fi
        }
        _docker_env_commands+=(ip)

        eval "$(declare -f _docker | sed -E "s/(local commands=\()/\1${_docker_env_commands[*]} /g")"
    fi

    
    which docker-compose >/dev/null && {
        # Extensions to docker-compose
        __docker_compose_env_wrapper() {
            case "${1}" in
                "ip")
                    shift
                    if [ "${1}" == "-h" -o "${1}" == "--help" ]; then
                        __docker_env_wrapper ip -h \
                         | sed -e 's/docker //g' \
                         | sed -e 's/CONTAINER/SERVICE/g' \
                         | sed -e 's/containers/services/g'
                    else
                        __docker_env_wrapper ip "$(command docker-compose ps -q $@)"
                    fi
                    ;;
                "port")
                    shift
                    if [ -z "${DOCKER_MACHINE_NAME}" ]; then
                        command docker-compose port "$@"
                    else
                        command docker-compose port "$@" \
                         | sed -e "s/0.0.0.0:/$(command docker-machine ip "${DOCKER_MACHINE_NAME}"):/g"
                    fi
                    ;;
                "help" | "-h" | "--help" | "")
                    [ -n "${1}" ] && shift
                    case "${1}" in
                        "")
                            command docker-compose help
                            echo ""
                            echo "Extended Commands:"
                            echo "  ip                 Returns the IP address for one or more services"
                            ;;
                        "ip")
                            __docker_compose_env_wrapper ${1} --help
                            ;;
                        *)
                            command docker-compose help "$@"
                            ;;
                    esac
                    ;;
                *)
                    command docker-compose "$@"
                    ;;
            esac
            return $?
        }
        alias docker-compose=__docker_compose_env_wrapper
        
        # Set up docker-compose auto-complete (as needed)
        if declare -f _docker_compose >/dev/null; then
            _docker_compose_env_commands=()

            _docker_compose_ip() {
                if [[ "${cur}" == -* ]]; then
                    COMPREPLY=($(compgen -W "--help" -- "${cur}"))
                else
                   __docker_compose_services_running
                fi
            }
            _docker_compose_env_commands+=(ip)
        
            eval "$(declare -f _docker_compose \
                    | sed -E "s/(local commands=\()/\1${_docker_compose_env_commands[*]} /g")"
        fi

    }
}
